use Program;
use List;
use Elem;

with_whitespace<E> = whitespace* E whitespace*
whitespace = " " / "\n" / "\t" { () }

pub program -> Program
  = list

list -> List
  = "(" vec:(elem)* ")" { List{ data: vec } }

elem -> Elem
  = whitespace* x:list whitespace* { Elem::List(x) }
  / whitespace* x:atom whitespace* { x }

atom -> Elem
  = symbol / boolean / number / string


boolean -> Elem
  = val:$("TRUE" / "FALSE" / "true" / "false")
  {
    let b = val.to_uppercase();
    match b.as_str() {
      "TRUE" => Elem::Bool(true),
      "FALSE" => Elem::Bool(false),
      _ => panic!("hoge")
    }
  }

symbol -> Elem
  = !boolean sym:$([a-zA-Z_]+) { Elem::Symbol(sym.to_string()) }

number -> Elem
  = n:$([0-9]+) { Elem::Int(n.parse().unwrap()) }

string -> Elem
  = "\"" s:$([^\"]*) "\"" { Elem::StringData(s.to_string()) }
